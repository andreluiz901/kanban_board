// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String
  email    String @unique
  password String
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at") 
  updatedAt DateTime? @db.Timestamptz() @updatedAt @map("updated_at")

  Boards Board[]

  @@map("users")
}

model Board {
  id          String @id @default(uuid())
  name        String
  description String
  userId      String @map("user_id")
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at") 
  updatedAt DateTime? @db.Timestamptz() @updatedAt @map("updated_at")

  User     User      @relation(fields: [userId], references: [id])
  Collumns Collumn[]

  @@map("boards")
}

model Collumn {
  id      String @id @default(uuid())
  name    String
  boardId String @map("board_id")
  order Int
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at") 
  updatedAt DateTime? @db.Timestamptz() @updatedAt @map("updated_at")

  Board Board  @relation(fields: [boardId], references: [id])
  Cards Card[]

  @@map("collumns")
}

model Card {
  id          String  @id @default(uuid())
  name        String
  description String
  isComplete  Boolean
  order Int
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at") 
  updatedAt DateTime? @db.Timestamptz() @updatedAt @map("updated_at")
  collumnId   String  @map("collum_id")

  Collumn Collumn @relation(fields: [collumnId], references: [id])

  @@map("cards")
}
